Hystrix
  分布式系统中，服务与服务之间的依赖调用，出现服务失败很正常。
  Hystrix是一个库，它提供了服务与服务之间的容错功能，主要体现在延迟容错和容错，从而做到控制分布式系统中的联动故障
  Hystrix通过隔离服务的访问点，阻止联动故障，并提供故障的解决方案，从而提高了这个分布式系统的弹性。

带来的影响：
  在高并发的情况下，单个服务的延迟，可能导致所有的请求都处于延迟状态，可能在几秒钟就使服务处于负载饱和的状态。
  服务的单个点的请求故障，会导致整个服务出现故障，更为糟糕的是该故障服务，会导致其他的服务出现负载饱和，资源耗尽，直到不可用，
从而导致这个分布式系统都不可用。这就是“雪崩
  故障包括：
    1网络连接失败或降级。
    2服务和服务器失败或变慢。
    3新的库或服务部署会改变行为或性能特征。
    4客户端库有错误。

Hystrix的设计原则
  1防止单个服务的故障，耗尽整个系统服务的容器（比如tomcat）的线程资源。
  2减少负载并快速失败，而不是排队。
  3在可行的情况下提供回退以保护用户免受故障。
  4使用隔离技术（如隔板，泳道和断路器模式）来限制任何一个依赖的影响。
  5通过近乎实时的指标，监控和警报来优化发现故障的时间。
  6通过配置更改的低延迟传播优化恢复时间，并支持Hystrix大多数方面的动态属性更改，从而允许您使用低延迟反馈循环进行实时操作修改。
  7保护整个依赖客户端执行中的故障，而不仅仅是在网络流量上进行保护降级、限流。

目标实现：
   1、通过HystrixCommand 或者HystrixObservableCommand 将所有的外部系统（或者称为依赖）包装起来，整个包装对象是单独运行在一个线程之中（这是典型的命令模式）
   2、超时请求应该超过你定义的阈值
   3、为每个依赖关系维护一个小的线程池（或信号量）; 如果它变满了，那么依赖关系的请求将立即被拒绝，而不是排队等待。
   4、统计成功，失败（由客户端抛出的异常），超时和线程拒绝。
   5、打开断路器可以在一段时间内停止对特定服务的所有请求，如果服务的错误百分比通过阈值，手动或自动的关闭断路器。
   6、当请求被拒绝、连接超时或者断路器打开，直接执行fallback逻辑。
   7、近乎实时监控指标和配置变化。

工作原理：
  通过Hystrix向服务依赖关系发出请求
  1、构建一个HystrixCommand或者HystrixObservableCommand 对象
  2、执行Command
     execute()–阻塞，，然后返回从依赖关系接收到的单个响应（或者在发生错误时抛出异常）
     queue()–返回一个可以从依赖关系获得单个响应的future 对象
     observe()–订阅Observable代表依赖关系的响应，并返回一个Observable，该Observable会复制该来源Observable
     toObservable() –返回一个Observable，当您订阅它时，将执行Hystrix命令并发出其响应
       K             value   = command.execute();
       Future<K>     fValue  = command.queue();
       Observable<K> ohValue = command.observe();
       Observable<K> ocValue = command.toObservable();
  3、响应是否有缓存？
     如果为该命令启用请求缓存，并且如果缓存中对该请求的响应可用，则此缓存响应将立即以“可观察”的形式返回

  4、断路器是否打开？
     Hystrix将检查断路器以查看电路是否打开
     电路打开（或“跳闸”），则Hystrix将不会执行该命令；电路关闭，则检查是否有可用于运行命令的容量

  5、线程池/队列/信号量是否已经满负载？
     如果与命令相关联的线程池和队列（或信号量，如果不在线程中运行）已满，则Hystrix将不会执行该命令

  6.HystrixObservableCommand.construct() 或者 HystrixCommand.run()

  7.计算Circuit 的健康
    Hystrix向断路器报告成功，失败，拒绝和超时，该断路器维护了一系列的计算统计数据组。这些统计信息来确定电路何时“跳闸

  8.获取Fallback
    当命令执行失败时，Hystrix试图恢复到你的回退：当construct（）或run（）

  9、返回成功的响应
     如果 Hystrix command成功，如果Hystrix命令成功，它将以Observable的形式返回对呼叫者的响应或响应

断路器（Circuit Breaker）

   发生电路开闭的过程
     1.假设电路上的音量达到一定阈值（HystrixCommandProperties.circuitBreakerRequestVolumeThreshold（））

     2.并假设错误百分比超过阈值错误百分比（HystrixCommandProperties.circuitBreakerErrorThresholdPercentage（）

     3.然后断路器从CLOSED转换到OPEN。

     4.虽然它是开放的，它使所有针对该断路器的请求短路。

     5.经过一段时间（HystrixCommandProperties.circuitBreakerSleepWindowInMilliseconds（）），下一个单个请求是通过（这是HALF-OPEN状态）。
      如果请求失败，断路器将在睡眠窗口持续时间内返回到OPEN状态。 如果请求成功，断路器将转换到CLOSED，逻辑1.重新接管。

隔离（Isolation）
   Hystrix采用隔板模式来隔离彼此的依赖关系，并限制对其中任何一个的并发访问。